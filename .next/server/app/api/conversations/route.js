"use strict";(()=>{var e={};e.id=3,e.ids=[3],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4770:e=>{e.exports=require("crypto")},599:(e,t,n)=>{n.r(t),n.d(t,{originalPathname:()=>y,patchFetch:()=>v,requestAsyncStorage:()=>h,routeModule:()=>u,serverHooks:()=>w,staticGenerationAsyncStorage:()=>g});var r={};n.r(r),n.d(r,{GET:()=>d});var a=n(9303),s=n(8716),o=n(670),i=n(7070),c=n(5748),l=n(3156),p=n(3330),m=n(1185);async function d(e){let t=e.headers.get("X-Current-User-Id");if(!t)return i.NextResponse.json({success:!1,message:"Auth ID required."},{status:401});try{await (0,c.Z)();let e=await l.Z.find({participants:new m.Types.ObjectId(t)}).sort({lastActivity:-1}).limit(20).lean(),n=[];for(let r of e){let e=r.participants.find(e=>e.toString()!==t);if(e){let a="",s="",o=r.participants[0].toString()===t?0:1,i=0===o?1:0;if(r.participantUsernames&&2===r.participantUsernames.length&&(a=r.participantUsernames[i]),r.participantNames&&2===r.participantNames.length&&(s=r.participantNames[i]),a&&s)n.push({_id:e.toString(),username:a,name:s});else{let t=await p.Z.findById(e).select("username name createdAt").lean();t&&n.push({_id:t._id.toString(),username:t.username,name:t.name,createdAt:t.createdAt.toISOString()})}}}return i.NextResponse.json({success:!0,users:n})}catch(e){return console.error("API CONVERSATIONS Error:",e.message,e.stack),i.NextResponse.json({success:!1,message:"Error fetching recent conversations."},{status:500})}}let u=new a.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/conversations/route",pathname:"/api/conversations",filename:"route",bundlePath:"app/api/conversations/route"},resolvedPagePath:"/home/sujal/Desktop/buzzly-minimal/src/app/api/conversations/route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:h,staticGenerationAsyncStorage:g,serverHooks:w}=u,y="/api/conversations/route";function v(){return(0,o.patchFetch)({serverHooks:w,staticGenerationAsyncStorage:g})}},5748:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(1185),a=n.n(r);let s=process.env.MONGODB_URI;if(!s)throw Error("CRITICAL: MONGODB_URI is not defined. Check .env.local or environment config.");let o=global.__buzzly_minimal_mongoose_cache;o||(o=global.__buzzly_minimal_mongoose_cache={conn:null,promise:null});let i=async function(){if(o.conn){if(1===o.conn.readyState)return o.conn;console.warn(`DB: Cached connection readyState is ${o.conn.readyState}. Re-attempting.`),o.conn=null,o.promise=null}o.promise||(console.log("DB: Creating new database connection promise."),o.promise=a().connect(s,{bufferCommands:!1}).then(e=>{console.log("DB: Mongoose connected successfully via new promise!");let t=e.connection;return t.on("error",e=>{console.error("DB: Mongoose connection error event:",e),o.conn=null,o.promise=null}),t.on("disconnected",()=>{console.warn("DB: Mongoose connection disconnected event."),o.conn=null,o.promise=null}),t}).catch(e=>{throw console.error("DB: Initial mongoose.connect() promise rejected:",e.message),o.promise=null,e}));try{console.log("DB: Awaiting connection promise to resolve."),o.conn=await o.promise}catch(e){throw console.error("DB: Error awaiting connection promise:",e.message),o.promise=null,e}if(o.conn&&1===o.conn.readyState)console.log("DB: Connection active after promise resolution.");else throw console.error("DB: Post-promise, connection not active. State:",o.conn?.readyState),Error("DB: Failed to establish an active connection.");return o.conn}},3156:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(1185),a=n.n(r);let s=new r.Schema({contentSnippet:{type:String,trim:!0,maxlength:100},senderId:{type:r.Schema.Types.ObjectId,ref:"User"},senderUsername:{type:String},timestamp:{type:Date}},{_id:!1}),o=new r.Schema({participants:{type:[r.Schema.Types.ObjectId],ref:"User",required:!0,validate:[e=>2===e.length,"Participants array must be two user IDs."],index:!0},participantUsernames:{type:[String],required:!0,validate:[e=>2===e.length,"ParticipantUsernames array must be two usernames."]},participantNames:{type:[String]},chatCollectionId:{type:String,required:!0,unique:!0,index:!0},lastMessage:{type:s,required:!1},lastActivity:{type:Date,default:Date.now,index:!0}},{timestamps:!0});o.index({participants:1,lastActivity:-1});let i=a().models.Conversation||a().model("Conversation",o)},3330:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(1185),a=n.n(r),s=n(2023),o=n.n(s);let i=new r.Schema({name:{type:String,required:[!0,"Please provide your name."],trim:!0,minlength:[2,"Name must be at least 2 characters long."],maxlength:[50,"Name cannot exceed 50 characters."]},email:{type:String,required:[!0,"Please provide an email address."],unique:!0,lowercase:!0,trim:!0,match:[/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,"Please provide a valid email address."]},username:{type:String,required:[!0,"Please choose a username."],unique:!0,lowercase:!0,trim:!0,minlength:[3,"Username must be at least 3 characters."],maxlength:[20,"Username cannot exceed 20 characters."],match:[/^[a-zA-Z0-9_.]+$/,"Username can only contain letters, numbers, underscores, and periods."]},password:{type:String,required:[!0,"Please create a password."],minlength:[8,"Password must be at least 8 characters."],select:!1},createdAt:{type:Date,default:Date.now}});i.pre("save",async function(e){if(!this.isModified("password")||!this.password)return e();try{let t=await o().genSalt(10);this.password=await o().hash(this.password,t),e()}catch(t){return e(t)}}),i.methods.comparePassword=async function(e){return this.password?o().compare(e,this.password):(console.error("User.comparePassword: User's password was not available for comparison. Ensure it's selected."),!1)};let c=a().models.User||a().model("User",i)}};var t=require("../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),r=t.X(0,[948,972,23],()=>n(599));module.exports=r})();