"use strict";(()=>{var e={};e.id=37,e.ids=[37],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4770:e=>{e.exports=require("crypto")},3628:(e,t,n)=>{n.r(t),n.d(t,{originalPathname:()=>v,patchFetch:()=>S,requestAsyncStorage:()=>w,routeModule:()=>h,serverHooks:()=>f,staticGenerationAsyncStorage:()=>y});var r={};n.r(r),n.d(r,{POST:()=>g});var s=n(9303),a=n(8716),o=n(670),i=n(7070),c=n(5748),d=n(2671),m=n(3156),l=n(3330),p=n(1185);let u=(e,t)=>{if(!e||!t)throw console.error("generateChatIdentifier: Called with missing user IDs.",{userId1:e,userId2:t}),Error("Both user IDs must be provided to generate a chat identifier.");return[e,t].sort().join("_")};async function g(e){let t=e.headers.get("X-User-Id"),n=e.headers.get("X-Username");if(!t||!n)return i.NextResponse.json({success:!1,message:"Sender auth missing."},{status:401});let{toUserId:r,content:s,tempId:a}=await e.json();if(!r||!s)return i.NextResponse.json({success:!1,message:"Missing toUserId or content."},{status:400});let o=u(t,r);try{await (0,c.Z)();let e=await l.Z.findById(t).select("name username").lean(),n=await l.Z.findById(r).select("name username").lean();if(!e||!n)return i.NextResponse.json({success:!1,message:"Sender or receiver not found."},{status:404});let u=new((0,d.Z)(o))({sender:new p.Types.ObjectId(t),senderUsername:e.username,receiver:new p.Types.ObjectId(r),content:s.trim(),timestamp:new Date}),g=await u.save(),h=[new p.Types.ObjectId(t),new p.Types.ObjectId(r)].sort((e,t)=>e.toString().localeCompare(t.toString())),w=[e.username,n.username].sort(),y=[e.name,n.name].sort();await m.Z.findOneAndUpdate({chatCollectionId:o},{$set:{participants:h,participantUsernames:w,participantNames:y,lastMessage:{contentSnippet:s.trim().substring(0,70),senderId:g.sender,senderUsername:g.senderUsername,timestamp:g.timestamp},lastActivity:g.timestamp},$setOnInsert:{createdAt:new Date,chatCollectionId:o}},{upsert:!0,new:!0,setDefaultsOnInsert:!0});let f={_id:g._id.toString(),tempId:a,chatId:o,fromUserId:g.sender.toString(),fromUsername:g.senderUsername,toUserId:g.receiver.toString(),content:g.content,timestamp:g.timestamp.toISOString(),status:"sent"};return i.NextResponse.json({success:!0,message:f},{status:201})}catch(e){return console.error("API /messages/send Error:",e.message,e.stack),i.NextResponse.json({success:!1,message:"Failed to send message.",originalTempId:a},{status:500})}}let h=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/messages/send/route",pathname:"/api/messages/send",filename:"route",bundlePath:"app/api/messages/send/route"},resolvedPagePath:"/home/sujal/Desktop/buzzly-minimal/src/app/api/messages/send/route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:w,staticGenerationAsyncStorage:y,serverHooks:f}=h,v="/api/messages/send/route";function S(){return(0,o.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:y})}},5748:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(1185),s=n.n(r);let a=process.env.MONGODB_URI;if(!a)throw Error("CRITICAL: MONGODB_URI is not defined. Check .env.local or environment config.");let o=global.__buzzly_minimal_mongoose_cache;o||(o=global.__buzzly_minimal_mongoose_cache={conn:null,promise:null});let i=async function(){if(o.conn){if(1===o.conn.readyState)return o.conn;console.warn(`DB: Cached connection readyState is ${o.conn.readyState}. Re-attempting.`),o.conn=null,o.promise=null}o.promise||(console.log("DB: Creating new database connection promise."),o.promise=s().connect(a,{bufferCommands:!1}).then(e=>{console.log("DB: Mongoose connected successfully via new promise!");let t=e.connection;return t.on("error",e=>{console.error("DB: Mongoose connection error event:",e),o.conn=null,o.promise=null}),t.on("disconnected",()=>{console.warn("DB: Mongoose connection disconnected event."),o.conn=null,o.promise=null}),t}).catch(e=>{throw console.error("DB: Initial mongoose.connect() promise rejected:",e.message),o.promise=null,e}));try{console.log("DB: Awaiting connection promise to resolve."),o.conn=await o.promise}catch(e){throw console.error("DB: Error awaiting connection promise:",e.message),o.promise=null,e}if(o.conn&&1===o.conn.readyState)console.log("DB: Connection active after promise resolution.");else throw console.error("DB: Post-promise, connection not active. State:",o.conn?.readyState),Error("DB: Failed to establish an active connection.");return o.conn}},3156:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(1185),s=n.n(r);let a=new r.Schema({contentSnippet:{type:String,trim:!0,maxlength:100},senderId:{type:r.Schema.Types.ObjectId,ref:"User"},senderUsername:{type:String},timestamp:{type:Date}},{_id:!1}),o=new r.Schema({participants:{type:[r.Schema.Types.ObjectId],ref:"User",required:!0,validate:[e=>2===e.length,"Participants array must be two user IDs."],index:!0},participantUsernames:{type:[String],required:!0,validate:[e=>2===e.length,"ParticipantUsernames array must be two usernames."]},participantNames:{type:[String]},chatCollectionId:{type:String,required:!0,unique:!0,index:!0},lastMessage:{type:a,required:!1},lastActivity:{type:Date,default:Date.now,index:!0}},{timestamps:!0});o.index({participants:1,lastActivity:-1});let i=s().models.Conversation||s().model("Conversation",o)},2671:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(1185),s=n.n(r);let a=new r.Schema({sender:{type:r.Schema.Types.ObjectId,ref:"User",required:!0},senderUsername:{type:String,required:!0,trim:!0},receiver:{type:r.Schema.Types.ObjectId,ref:"User",required:!0},content:{type:String,required:!0,trim:!0},timestamp:{type:Date,default:Date.now},read:{type:Boolean,default:!1}});a.index({timestamp:1},{expireAfterSeconds:259200});let o=e=>{if(!e||"string"!=typeof e||""===e.trim())throw Error("Invalid chat collection identifier provided for chat messages model.");let t=e.replace(/[^a-zA-Z0-9_]/g,"");if(0===t.length)throw Error("Sanitized collection identifier is empty.");let n=`chat_${t}_messages`;return s().models[n]?s().models[n]:s().model(n,a)}},3330:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(1185),s=n.n(r),a=n(2023),o=n.n(a);let i=new r.Schema({name:{type:String,required:[!0,"Please provide your name."],trim:!0,minlength:[2,"Name must be at least 2 characters long."],maxlength:[50,"Name cannot exceed 50 characters."]},email:{type:String,required:[!0,"Please provide an email address."],unique:!0,lowercase:!0,trim:!0,match:[/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,"Please provide a valid email address."]},username:{type:String,required:[!0,"Please choose a username."],unique:!0,lowercase:!0,trim:!0,minlength:[3,"Username must be at least 3 characters."],maxlength:[20,"Username cannot exceed 20 characters."],match:[/^[a-zA-Z0-9_.]+$/,"Username can only contain letters, numbers, underscores, and periods."]},password:{type:String,required:[!0,"Please create a password."],minlength:[8,"Password must be at least 8 characters."],select:!1},createdAt:{type:Date,default:Date.now}});i.pre("save",async function(e){if(!this.isModified("password")||!this.password)return e();try{let t=await o().genSalt(10);this.password=await o().hash(this.password,t),e()}catch(t){return e(t)}}),i.methods.comparePassword=async function(e){return this.password?o().compare(e,this.password):(console.error("User.comparePassword: User's password was not available for comparison. Ensure it's selected."),!1)};let c=s().models.User||s().model("User",i)}};var t=require("../../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),r=t.X(0,[948,972,23],()=>n(3628));module.exports=r})();