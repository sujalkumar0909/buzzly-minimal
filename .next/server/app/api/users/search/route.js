"use strict";(()=>{var e={};e.id=179,e.ids=[179],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4770:e=>{e.exports=require("crypto")},4693:(e,r,n)=>{n.r(r),n.d(r,{originalPathname:()=>g,patchFetch:()=>w,requestAsyncStorage:()=>d,routeModule:()=>m,serverHooks:()=>h,staticGenerationAsyncStorage:()=>p});var o={};n.r(o),n.d(o,{GET:()=>u});var s=n(9303),t=n(8716),a=n(670),c=n(7070),i=n(5748),l=n(3330);async function u(e){let{searchParams:r}=new URL(e.url),n=r.get("q"),o=e.headers.get("X-Current-User-Id");if(console.log(`API SEARCH (No Auth): Query: "${n}", UserToExclude (header): "${o}"`),!n||n.trim().length<2)return c.NextResponse.json({success:!1,message:"Search query must be at least 2 characters."},{status:400});try{await (0,i.Z)();let e=RegExp(n.trim(),"i"),r={$or:[{username:e},{name:e}]};o&&"null"!==o&&"undefined"!==o&&(r._id={$ne:o});let s=(await l.Z.find(r).select("_id username name createdAt").limit(10).lean()).map(e=>({_id:e._id.toString(),username:e.username,name:e.name,createdAt:e.createdAt}));return console.log(`API SEARCH (No Auth): Found ${s.length} users.`),c.NextResponse.json({success:!0,users:s},{status:200})}catch(e){return console.error("API SEARCH Error:",e.message,e.stack),c.NextResponse.json({success:!1,message:"Error searching users."},{status:500})}}let m=new s.AppRouteRouteModule({definition:{kind:t.x.APP_ROUTE,page:"/api/users/search/route",pathname:"/api/users/search",filename:"route",bundlePath:"app/api/users/search/route"},resolvedPagePath:"/home/sujal/Desktop/buzzly-minimal/src/app/api/users/search/route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:d,staticGenerationAsyncStorage:p,serverHooks:h}=m,g="/api/users/search/route";function w(){return(0,a.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:p})}},5748:(e,r,n)=>{n.d(r,{Z:()=>c});var o=n(1185),s=n.n(o);let t=process.env.MONGODB_URI;if(!t)throw Error("CRITICAL: MONGODB_URI is not defined. Check .env.local or environment config.");let a=global.__buzzly_minimal_mongoose_cache;a||(a=global.__buzzly_minimal_mongoose_cache={conn:null,promise:null});let c=async function(){if(a.conn){if(1===a.conn.readyState)return a.conn;console.warn(`DB: Cached connection readyState is ${a.conn.readyState}. Re-attempting.`),a.conn=null,a.promise=null}a.promise||(console.log("DB: Creating new database connection promise."),a.promise=s().connect(t,{bufferCommands:!1}).then(e=>{console.log("DB: Mongoose connected successfully via new promise!");let r=e.connection;return r.on("error",e=>{console.error("DB: Mongoose connection error event:",e),a.conn=null,a.promise=null}),r.on("disconnected",()=>{console.warn("DB: Mongoose connection disconnected event."),a.conn=null,a.promise=null}),r}).catch(e=>{throw console.error("DB: Initial mongoose.connect() promise rejected:",e.message),a.promise=null,e}));try{console.log("DB: Awaiting connection promise to resolve."),a.conn=await a.promise}catch(e){throw console.error("DB: Error awaiting connection promise:",e.message),a.promise=null,e}if(a.conn&&1===a.conn.readyState)console.log("DB: Connection active after promise resolution.");else throw console.error("DB: Post-promise, connection not active. State:",a.conn?.readyState),Error("DB: Failed to establish an active connection.");return a.conn}},3330:(e,r,n)=>{n.d(r,{Z:()=>i});var o=n(1185),s=n.n(o),t=n(2023),a=n.n(t);let c=new o.Schema({name:{type:String,required:[!0,"Please provide your name."],trim:!0,minlength:[2,"Name must be at least 2 characters long."],maxlength:[50,"Name cannot exceed 50 characters."]},email:{type:String,required:[!0,"Please provide an email address."],unique:!0,lowercase:!0,trim:!0,match:[/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,"Please provide a valid email address."]},username:{type:String,required:[!0,"Please choose a username."],unique:!0,lowercase:!0,trim:!0,minlength:[3,"Username must be at least 3 characters."],maxlength:[20,"Username cannot exceed 20 characters."],match:[/^[a-zA-Z0-9_.]+$/,"Username can only contain letters, numbers, underscores, and periods."]},password:{type:String,required:[!0,"Please create a password."],minlength:[8,"Password must be at least 8 characters."],select:!1},createdAt:{type:Date,default:Date.now}});c.pre("save",async function(e){if(!this.isModified("password")||!this.password)return e();try{let r=await a().genSalt(10);this.password=await a().hash(this.password,r),e()}catch(r){return e(r)}}),c.methods.comparePassword=async function(e){return this.password?a().compare(e,this.password):(console.error("User.comparePassword: User's password was not available for comparison. Ensure it's selected."),!1)};let i=s().models.User||s().model("User",c)}};var r=require("../../../../webpack-runtime.js");r.C(e);var n=e=>r(r.s=e),o=r.X(0,[948,972,23],()=>n(4693));module.exports=o})();